#=================================================================#
# Template file: Photron.template
# Database for the records specific to the Photron detector driver
# Kevin Peterson
# October 27, 2015

include "ADBase.template"

###############################################################################
#  Note: The following are records defined in ADBase.template.                #
#        We are changing some of the fields here to reflect valid values for  #
#        Photron                                                              #
###############################################################################

# Keep target positions and size in sync with the readbacks
record(longout, "$(P)$(R)SizeX")
{
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)SizeY")
{
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)MinX")
{
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)MinY")
{
   info(asyn:READBACK, "1")
}

# Acquire time needs a higher precision
record(ao, "$(P)$(R)AcquireTime")
{
   field(PREC, "7")
   info(asyn:READBACK, "1")
}

record(ai, "$(P)$(R)AcquireTime_RBV")
{
   field(PREC, "7")
}

# Don't process records at iocInit that interfere with autosave
record(longout, "$(P)$(R)BinX")
{
   field(PINI, "NO")
}
record(longout, "$(P)$(R)BinY")
{
   field(PINI, "NO")
}
record(longout, "$(P)$(R)MinX")
{
   field(PINI, "NO")
}
record(longout, "$(P)$(R)MinY")
{
   field(PINI, "NO")
}
record(longout, "$(P)$(R)SizeX")
{
   field(PINI, "NO")
}
record(longout, "$(P)$(R)SizeY")
{
   field(PINI, "NO")
}


# Only 2 data types are supported, unsigned 8 and 16 bit integers
record(mbbo, "$(P)$(R)DataType")
{
   field(ZRST, "UInt8")
   field(ZRVL, "1")
   field(ONST, "UInt16")
   field(ONVL, "3")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

record(mbbi, "$(P)$(R)DataType_RBV")
{
   field(ZRST, "UInt8")
   field(ZRVL, "1")
   field(ONST, "UInt16")
   field(ONVL, "3")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

# Only Mono, Bayer and RGB1 color modes are supported at this time
record(mbbo, "$(P)$(R)ColorMode")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "")
   field(ONVL, "")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

record(mbbi, "$(P)$(R)ColorMode_RBV")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "")
   field(ONVL, "")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

###############################################################################
#  Note: The following records are specific to the Photron                    #
###############################################################################

# This could probably be replaced with a bo, since there are only two values
# that don't return errors.
record(mbbo, "$(P)$(R)AcquireMode")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_ACQUIRE_MODE")
   field(ZRST, "Live")
   field(ZRVL, "0")
   field(ONST, "Record")
   field(ONVL, "1")
   field(VAL,  "0")
}

record(longin, "$(P)$(R)Status_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_STATUS")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(P)$(R)StatusName_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Camera Status")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_STATUS_NAME")
   field(ZRST, "Live")
   field(ZRVL, "0")
   field(ONST, "Playback")
   field(ONVL, "1")
   field(TWST, "Rec Ready")
   field(TWVL, "2")
   field(THST, "Endless")
   field(THVL, "3")
   field(FRST, "Record")
   field(FRVL, "4")
   field(FVST, "Save")
   field(FVVL, "5")
   field(SXST, "Load")
   field(SXVL, "6")
   field(SVST, "Pause")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)CamMode")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Operating Mode")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CAM_MODE")
   field(ZRST, "Default")
   field(ZRVL, "0")
   field(ONST, "Variable")
   field(ONVL, "1")
   field(TWST, "External")
   field(TWVL, "2")
   info(asyn:READBACK, "1")
}

record(mbbi, "$(P)$(R)CamMode_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Camera mode")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CAM_MODE")
   field(ZRST, "Default")
   field(ZRVL, "0")
   field(ONST, "Variable")
   field(ONVL, "1")
   field(TWST, "External")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)SyncPulse")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Othersync pulse pref")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SYNC_PULSE")
   field(ZNAM, "Neg")
   field(ONAM, "Pos")
   field(VAL,  "1")
}

record(longin, "$(P)$(R)MaxFrames_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MAX_FRAMES")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)8BitSel")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "8 Bit Select")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_8_BIT_SEL")
   field(ZRST, "None")
   field(ZRVL, "0")
   field(ONST, "One")
   field(ONVL, "1")
   field(TWST, "Two")
   field(TWVL, "2")
   field(THST, "Three")
   field(THVL, "3")
   field(FRST, "Four")
   field(FRVL, "4")
}

record(mbbi, "$(P)$(R)8BitSel_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "8 Bit Select")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_8_BIT_SEL")
   field(ZRST, "None")
   field(ZRVL, "0")
   field(ONST, "One")
   field(ONVL, "1")
   field(TWST, "Two")
   field(TWVL, "2")
   field(THST, "Three")
   field(THVL, "3")
   field(FRST, "Four")
   field(FRVL, "4")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)RecordRate")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Record Rate (FPS)")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_REC_RATE")
}

record(longin, "$(P)$(R)RecordRate_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Record Rate (FPS)")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_REC_RATE")
   field(SCAN, "I/O Intr")
   field(FLNK, "$(P)$(R)RecordRateSync")
}

record(bo, "$(P)$(R)ChangeRecRate")
{
   field(DTYP, "asynInt32")
   field(DESC, "Change Rec Rate")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CHANGE_REC_RATE")
   field(ZNAM, "Decrease")
   field(ONAM, "Increase")
}

record(calcout, "$(P)$(R)RecordRateSync")
{
   field(DESC, "Sync record rate")
   field(INPA, "$(P)$(R)CamMode")
   field(INPB, "$(P)$(R)CamMode_RBV")
   field(INPC, "$(P)$(R)RecordRate_RBV")
   field(CALC, "A=0&&B=0")
   field(DOPT, "Use OCAL")
   field(OOPT, "When Non-zero")
   field(OCAL, "C")
   field(OUT,  "$(P)$(R)RecordRate PP")
}

record(longout, "$(P)$(R)ShutterFps")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Shutter Speed (FPS)")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SHUTTER_FPS")
   info(asyn:READBACK, "1")
}

record(longin, "$(P)$(R)ShutterFps_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Shutter Speed (FPS)")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SHUTTER_FPS")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)ChangeShutterFps")
{
   field(DTYP, "asynInt32")
   field(DESC, "Change Shutter Speed")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CHANGE_SHUTTER_FPS")
   field(ZNAM, "Decrease")
   field(ONAM, "Increase")
}

record(bo, "$(P)$(R)JumpShutterFps")
{
   field(DTYP, "asynInt32")
   field(DESC, "Jump Shutter Speed")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_JUMP_SHUTTER_FPS")
   field(ZNAM, "Minimum")
   field(ONAM, "Maximum")
}

# The actual trigger-mode PVs get enums from the driver, however, we still need
# a readback on the main page, otherwise the user will keep the popup open
record(mbbi, "$(P)$(R)TriggerModeAll_RBV")
{
   field(DTYP, "Soft Channel")
   field(DESC, "Static Trig RBV")
   field(INP,  "$(P)$(R)TriggerMode_RBV CP NMS")
   field(ZRST, "Start")
   field(ZRVL, "0")
   field(ONST, "Center")
   field(ONVL, "1")
   field(TWST, "End")
   field(TWVL, "2")
   field(THST, "Manual")
   field(THVL, "4")
   field(FRST, "Random")
   field(FRVL, "3")
   field(FVST, "Random reset")
   field(FVVL, "5")
   field(SXST, "Random center")
   field(SXVL, "6")
   field(SVST, "Random manual")
   field(SVVL, "7")
   field(EIST, "Two-stage 1/2")
   field(EIVL, "8")
   field(NIST, "Two-stage 1/4")
   field(NIVL, "9")
   field(TEST, "Two-stage 1/8")
   field(TEVL, "10")
   field(SCAN, "Passive")
}

record(longout, "$(P)$(R)AfterFrames")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Trigger after frames")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_AFTER_FRAMES")
}

record(longin, "$(P)$(R)AfterFrames_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Trigger after frames")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_AFTER_FRAMES")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)RandomFrames")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Trigger random frames")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_RANDOM_FRAMES")
}

record(longin, "$(P)$(R)RandomFrames_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Trigger random frames")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_RANDOM_FRAMES")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)RecCount")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Num recorded")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_REC_COUNT")
}

record(longin, "$(P)$(R)RecCount_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Num recorded")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_REC_COUNT")
   field(SCAN, "I/O Intr")
}

## Software trigger
record(busy, "$(P)$(R)SoftwareTrigger")
{
  field(DTYP, "asynInt32")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SOFT_TRIG")
  field(ZNAM, "Done")
  field(ONAM, "Trigger")
  field(VAL,  "0")
}

# Calculate recording duration so that the trigger busy record can be reset. 
# This should allow the scan record to wait for triggered recording to complete
# It will work better with modes where most of the frames are after frames
record(calcout, "$(P)$(R)AcqTimeCalc")
{
   field(DTYP, "Soft Channel")
   field(INPA, "$(P)$(R)TriggerMode_RBV CP NMS")
   field(INPB, "$(P)$(R)AfterFrames_RBV CP NMS")
   field(INPC, "$(P)$(R)RecordRate_RBV CP NMS")
   # D is a fixed delay to add to the theoretical acquire time (B/C)
   field(D,    "0.0")
   # E is a multiplier can be used to add % delay (0% = default)
   field(E,    "1.0")
   field(CALC, "(A<8)?B/C*E+D:0.01")
   field(OOPT, "On Change")
   field(DOPT, "Use CALC")
   field(OUT,  "$(P)$(R)TrigResetCalc.ODLY NPP NMS")
   field(PREC, "6")
}

record(calcout, "$(P)$(R)TrigResetCalc")
{
   field(DTYP, "Soft Channel")
   field(INPA, "$(P)$(R)SoftwareTrigger CP NMS")
   field(CALC, "A")
   field(OCAL, "0")
   field(OOPT, "Transition To Non-zero")
   field(DOPT, "Use OCAL")
   field(OUT,  "$(P)$(R)SoftwareTrigger CA NMS")
   field(PREC, "6")
}

record(longin, "$(P)$(R)FrameStart_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem Frame Start")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_FRAME_START")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)FrameEnd_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem Frame End")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_FRAME_END")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)LiveMode")
{
   field(DTYP, "asynInt32")
   field(DESC, "Set Live Mode")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_LIVE_MODE")
   field(ZNAM, "Ignore")
   field(ONAM, "Enable")
}

record(bo, "$(P)$(R)PreviewMode")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Preview Mode")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PREVIEW_MODE")
   field(ZNAM, "Off")
   field(ONAM, "On")
}

record(longout, "$(P)$(R)PMIndex")
{
   #field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(DESC, "Preview Mode Index")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_INDEX")
   info(asyn:READBACK, "1")
}

record(bo, "$(P)$(R)ChangePMIndex")
{
   field(DTYP, "asynInt32")
   field(DESC, "Change PM Index")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CHANGE_PM_INDEX")
   field(ZNAM, "Decrease")
   field(ONAM, "Increase")
}

# TODO: Replace the following calcouts with a single transform record

record(calcout, "$(P)$(R)PMIndexLOPR")
{
   field(INPA, "$(P)$(R)PMStart CP NMS")
   field(CALC, "A")
   field(OUT,  "$(P)$(R)PMIndex.LOPR NPP NMS")
}

record(calcout, "$(P)$(R)PMIndexHOPR")
{
   field(INPA, "$(P)$(R)PMEnd CP NMS")
   field(CALC, "A")
   field(OUT,  "$(P)$(R)PMIndex.HOPR NPP NMS")
}

record(bo, "$(P)$(R)PMFirst")
{
   field(DTYP, "asynInt32")
   field(DESC, "Jump to start")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_FIRST")
   field(ZNAM, "Done")
   field(ONAM, "Do")
}

record(bo, "$(P)$(R)PMLast")
{
   field(DTYP, "asynInt32")
   field(DESC, "Jump to end")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_LAST")
   field(ZNAM, "Done")
   field(ONAM, "Do")
}

record(longout, "$(P)$(R)PMStart")
{
   #field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(DESC, "Preview Mode Index Start")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_START")
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)PMEnd")
{
   #field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(DESC, "Preview Mode Index End")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_END")
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)PMPlayFPS")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(DESC, "Preview Mode FPS")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_PLAY_FPS")
   field(VAL,  "1")
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)PMPlayMult")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(DESC, "Preview Mode Mult")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_PLAY_MULT")
   field(VAL,  "1")
   info(asyn:READBACK, "1")
}

record(bo, "$(P)$(R)PMPlay")
{
   field(DTYP, "asynInt32")
   field(DESC, "Play preview")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_PLAY")
   field(ZNAM, "Done")
   field(ONAM, "Play")
}

record(bo, "$(P)$(R)PMPlayRev")
{
   field(DTYP, "asynInt32")
   field(DESC, "Play reverse preview")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_PLAY_REV")
   field(ZNAM, "Done")
   field(ONAM, "Play")
}

record(bo, "$(P)$(R)PMRepeat")
{
   field(DTYP, "asynInt32")
   field(DESC, "Repeat")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_REPEAT")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(VAL,  "0")
}

record(bo, "$(P)$(R)PMSave")
{
   field(DTYP, "asynInt32")
   field(DESC, "Save")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_SAVE")
   field(ZNAM, "Done")
   field(ONAM, "Do")
}

record(bo, "$(P)$(R)PMCancel")
{
   field(DTYP, "asynInt32")
   field(DESC, "Cancel")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PM_CANCEL")
   field(ZNAM, "Done")
   field(ONAM, "Do")
}

record(dfanout, "$(P)$(R)PMIdxToStart")
{
   field(DESC, "Set Start to Index")
   field(DOL,  "$(P)$(R)PMIndex NPP NMS")
   field(OMSL, "closed_loop")
   field(OUTA, "$(P)$(R)PMStart PP NMS")
   field(SCAN, "Passive")
}

record(dfanout, "$(P)$(R)PMIdxToEnd")
{
   field(DESC, "Set End to Index")
   field(DOL,  "$(P)$(R)PMIndex NPP NMS")
   field(OMSL, "closed_loop")
   field(OUTA, "$(P)$(R)PMEnd PP NMS")
   field(SCAN, "Passive")
}

record(longin, "$(P)$(R)MemIRIGDay_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Day")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_DAY")
   field(SCAN, "I/O Intr")
}

record(calcout, "$(P)$(R)PMStatusMon")
{
   field(DESC, "Status monitor")
   field(INPA, "$(P)$(R)Status_RBV CP NMS")
   field(INPB, "$(P)$(R)PreviewMode NPP NMS")
   field(CALC, "(A=1)&&(B=1)")
   field(OCAL, "1")
   field(OOPT, "Transition To Non-zero")
   field(DOPT, "Use OCAL")
   field(OUT,  "$(P)$(R)PMPluginRead.PROC PP NMS")
}

record(transform, "$(P)$(R)PMPluginRead")
{
   field(DESC, "Read file plugins")
   field(SCAN, "Passive")
   field(CMTA, "NetCDF")
   field(CMTB, "TIFF")
   field(CMTC, "JPEG")
   field(CMTD, "Nexus")
   field(CMTE, "Magick")
   field(CMTF, "HDF")
   field(INPA, "$(P)netCDF1:EnableCallbacks NPP NMS")
   field(INPB, "$(P)TIFF1:EnableCallbacks NPP NMS")
   field(INPC, "$(P)JPEG1:EnableCallbacks NPP NMS")
   field(INPD, "$(P)Nexus1:EnableCallbacks NPP NMS")
   field(INPE, "$(P)Magick1:EnableCallbacks NPP NMS")
   field(INPF, "$(P)HDF1:EnableCallbacks NPP NMS")
   field(FLNK, "$(P)$(R)PMPluginDisable")
}

record(dfanout, "$(P)$(R)PMPluginDisable")
{
   field(DESC, "Disable file plugins")
   field(OMSL, "supervisory")
   field(VAL,  "0")
   field(OUTA, "$(P)netCDF1:EnableCallbacks PP NMS")
   field(OUTB, "$(P)TIFF1:EnableCallbacks PP NMS")
   field(OUTC, "$(P)JPEG1:EnableCallbacks PP NMS")
   field(OUTD, "$(P)Nexus1:EnableCallbacks PP NMS")
   field(OUTE, "$(P)Magick1:EnableCallbacks PP NMS")
   field(OUTF, "$(P)HDF1:EnableCallbacks PP NMS")
}

record(dfanout, "$(P)$(R)PMSaveFanout")
{
   field(DESC, "Restore plugins then save")
   field(OMSL, "supervisory")
   field(VAL,  "1")
   field(OUTA, "$(P)$(R)PMPluginRestore1.PROC PP NMS")
   field(OUTB, "$(P)$(R)PMPluginRestore2.PROC PP NMS")
   field(OUTC, "$(P)$(R)PMPluginRestore3.PROC PP NMS")
   field(OUTD, "$(P)$(R)PMPluginRestore4.PROC PP NMS")
   field(OUTE, "$(P)$(R)PMPluginRestore5.PROC PP NMS")
   field(OUTF, "$(P)$(R)PMPluginRestore6.PROC PP NMS")
   field(OUTG, "$(P)$(R)PMSave PP NMS")
}

record(dfanout, "$(P)$(R)PMCancelFanout")
{
   field(DESC, "Restore plugins then cancel")
   field(OMSL, "supervisory")
   field(VAL,  "1")
   field(OUTA, "$(P)$(R)PMPluginRestore1.PROC PP NMS")
   field(OUTB, "$(P)$(R)PMPluginRestore2.PROC PP NMS")
   field(OUTC, "$(P)$(R)PMPluginRestore3.PROC PP NMS")
   field(OUTD, "$(P)$(R)PMPluginRestore4.PROC PP NMS")
   field(OUTE, "$(P)$(R)PMPluginRestore5.PROC PP NMS")
   field(OUTF, "$(P)$(R)PMPluginRestore6.PROC PP NMS")
   field(OUTG, "$(P)$(R)PMCancel PP NMS")
}

record(calcout, "$(P)$(R)PMPluginRestore1")
{
   field(DESC, "Restore NetCDF")
   field(SCAN, "Passive")
   field(INPA, "$(P)$(R)PMPluginRead.A NPP NMS")
   field(CALC, "A=1")
   field(OCAL, "1")
   field(OOPT, "When Non-zero")
   field(DOPT, "Use OCAL")
   field(OUT,  "$(P)netCDF1:EnableCallbacks PP NMS")
}

record(calcout, "$(P)$(R)PMPluginRestore2")
{
   field(DESC, "Restore TIFF")
   field(SCAN, "Passive")
   field(INPA, "$(P)$(R)PMPluginRead.B NPP NMS")
   field(CALC, "A=1")
   field(OCAL, "1")
   field(OOPT, "When Non-zero")
   field(DOPT, "Use OCAL")
   field(OUT,  "$(P)TIFF1:EnableCallbacks PP NMS")
}

record(calcout, "$(P)$(R)PMPluginRestore3")
{
   field(DESC, "Restore JPEG")
   field(SCAN, "Passive")
   field(INPA, "$(P)$(R)PMPluginRead.C NPP NMS")
   field(CALC, "A=1")
   field(OCAL, "1")
   field(OOPT, "When Non-zero")
   field(DOPT, "Use OCAL")
   field(OUT,  "$(P)JPEG1:EnableCallbacks PP NMS")
}

record(calcout, "$(P)$(R)PMPluginRestore4")
{
   field(DESC, "Restore Nexus")
   field(SCAN, "Passive")
   field(INPA, "$(P)$(R)PMPluginRead.D NPP NMS")
   field(CALC, "A=1")
   field(OCAL, "1")
   field(OOPT, "When Non-zero")
   field(DOPT, "Use OCAL")
   field(OUT,  "$(P)Nexus1:EnableCallbacks PP NMS")
}

record(calcout, "$(P)$(R)PMPluginRestore5")
{
   field(DESC, "Restore Magick")
   field(SCAN, "Passive")
   field(INPA, "$(P)$(R)PMPluginRead.E NPP NMS")
   field(CALC, "A=1")
   field(OCAL, "1")
   field(OOPT, "When Non-zero")
   field(DOPT, "Use OCAL")
   field(OUT,  "$(P)Magick1:EnableCallbacks PP NMS")
}

record(calcout, "$(P)$(R)PMPluginRestore6")
{
   field(DESC, "Restore HDF")
   field(SCAN, "Passive")
   field(INPA, "$(P)$(R)PMPluginRead.F NPP NMS")
   field(CALC, "A=1")
   field(OCAL, "1")
   field(OOPT, "When Non-zero")
   field(DOPT, "Use OCAL")
   field(OUT,  "$(P)HDF1:EnableCallbacks PP NMS")
}

record(longin, "$(P)$(R)MemIRIGHour_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Hour")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_HOUR")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MemIRIGMin_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Minute")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_MIN")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MemIRIGSec_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Second")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_SEC")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MemIRIGUsec_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Microsecond")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_USEC")
   field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(R)MemIRIGSigEx_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Signal Exist")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_SIGEX")
   field(ZNAM, "Internal")
   field(ONAM, "External")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)IRIG")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(DESC, "IRIG On/Off")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_IRIG")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(VAL,  "1")
   info(asyn:READBACK, "1")
}

record(bi, "$(P)$(R)IRIG_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "IRIG On/Off")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_IRIG")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)SyncPriority")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Sync Priority")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SYNC_PRIORITY")
   field(ZRST, "Off")
   field(ZRVL, "0")
   field(ONST, "Master")
   field(ONVL, "1")
   field(TWST, "Slave")
   field(TWVL, "2")
}

record(mbbi, "$(P)$(R)SyncPriority_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Sync Priority")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SYNC_PRIORITY")
   field(ZRST, "Off")
   field(ZRVL, "0")
   field(ONST, "Master")
   field(ONVL, "1")
   field(TWST, "Slave")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)ResIdx")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(DESC, "Resolution Index")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_RES_INDEX")
   info(asyn:READBACK, "1")
}

record(longin, "$(P)$(R)ResIdx_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Resolution Index")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_RES_INDEX")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)ChangeResIdx")
{
   field(DTYP, "asynInt32")
   field(DESC, "Change Res Index")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CHANGE_RES_IDX")
   field(ZNAM, "Decrement")
   field(ONAM, "Increment")
}

# Var chan selection

record(longout, "$(P)$(R)VarChan")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Variable Channel")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN")
   field(DRVH, "20")
   field(DRVL, "1")
   info(asyn:READBACK, "1")
}

record(longin, "$(P)$(R)VarChan_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Variable Channel")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)ChangeVarChan")
{
   field(DTYP, "asynInt32")
   field(DESC, "Change Var Chan")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CHANGE_VAR_CHAN")
   field(ZNAM, "Decrease")
   field(ONAM, "Increase")
}

record(longin, "$(P)$(R)VarChanRate_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Variable Chan Rate")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_RATE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)VarChanXSize_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Variable Chan X Size")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_X_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)VarChanYSize_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Variable Chan Y Size")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_Y_SIZE")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)VarChanXPos_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Variable Chan X Pos")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_X_POS")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)VarChanYPos_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Variable Chan Y Pos")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_Y_POS")
   field(SCAN, "I/O Intr")
}

# Var chan limits

record(longin, "$(P)$(R)VarChanWStep_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Variable Chan W Step")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_W_STEP")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)VarChanHStep_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Variable Chan H Step")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_H_STEP")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)VarChanXPosStep_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Var Chan X Pos Step")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_X_POS_STEP")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)VarChanYPosStep_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Var Chan Y Pos Step")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_Y_POS_STEP")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)VarChanWMin_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Variable Chan W Min")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_W_MIN")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)VarChanHMin_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Variable Chan H Min")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_H_MIN")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)VarChanFreePos_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Var Chan Free Pos")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_FREE_POS")
   field(SCAN, "I/O Intr")
}

# Var chan editing

record(bo, "$(P)$(R)VarChanApply")
{
   field(DTYP, "asynInt32")
   field(DESC, "Apply var chan settings")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_APPLY")
   field(ZNAM, "Done")
   field(ONAM, "Apply")
}

record(bo, "$(P)$(R)VarChanErase")
{
   field(DTYP, "asynInt32")
   field(DESC, "Erase var chan settings")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_CHAN_ERASE")
   field(ZNAM, "Done")
   field(ONAM, "Erase")
}

record(longout, "$(P)$(R)VarChanRate")
{
   field(DTYP, "asynInt32")
   #field(PINI, "YES")
   field(DESC, "Variable Chan Rate")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_EDIT_RATE")
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)VarChanXSize")
{
   field(DTYP, "asynInt32")
   #field(PINI, "YES")
   field(DESC, "Variable Chan X Size")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_EDIT_X_SIZE")
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)VarChanYSize")
{
   field(DTYP, "asynInt32")
   #field(PINI, "YES")
   field(DESC, "Variable Chan Y Size")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_EDIT_Y_SIZE")
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)VarChanXPos")
{
   field(DTYP, "asynInt32")
   #field(PINI, "YES")
   field(DESC, "Variable Chan X Pos")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_EDIT_X_POS")
   info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)VarChanYPos")
{
   field(DTYP, "asynInt32")
   #field(PINI, "YES")
   field(DESC, "Variable Chan Y Pos")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_EDIT_Y_POS")
   info(asyn:READBACK, "1")
}

record(bo, "$(P)$(R)VarChanMaxRes")
{
   field(DTYP, "asynInt32")
   field(DESC, "Set Var Edit Max Res")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_VAR_EDIT_MAX_RES")
   field(ZNAM, "Done")
   field(ONAM, "Set")
}

record(bo, "$(P)$(R)ChangeVarEditRate")
{
   field(DTYP, "asynInt32")
   field(DESC, "Change Var Edit Rate")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CHANGE_VAR_EDIT_RATE")
   field(ZNAM, "Decrease")
   field(ONAM, "Increase")
}

record(bo, "$(P)$(R)ChangeVarEditXSize")
{
   field(DTYP, "asynInt32")
   field(DESC, "Change Var Edit Width")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CHANGE_VAR_EDIT_X_SIZE")
   field(ZNAM, "Decrease")
   field(ONAM, "Increase")
}

record(bo, "$(P)$(R)ChangeVarEditYSize")
{
   field(DTYP, "asynInt32")
   field(DESC, "Change Var Edit Height")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CHANGE_VAR_EDIT_Y_SIZE")
   field(ZNAM, "Decrease")
   field(ONAM, "Increase")
}

record(bo, "$(P)$(R)ChangeVarEditXPos")
{
   field(DTYP, "asynInt32")
   field(DESC, "Change Var Edit X Pos")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CHANGE_VAR_EDIT_X_POS")
   field(ZNAM, "Decrease")
   field(ONAM, "Increase")
}

record(bo, "$(P)$(R)ChangeVarEditYPos")
{
   field(DTYP, "asynInt32")
   field(DESC, "Change Var Edit Y Pos")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_CHANGE_VAR_EDIT_Y_POS")
   field(ZNAM, "Decrease")
   field(ONAM, "Increase")
}

# Shading
record(mbbo, "$(P)$(R)ShadingMode")
{
   field(DTYP, "asynInt32")
   #!field(PINI, "YES")
   field(DESC, "Shading Mode")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SHADING_MODE")
   info(asyn:READBACK, "1")
}

record(mbbi, "$(P)$(R)ShadingMode_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Shading Mode RBV")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SHADING_MODE")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)BurstTransfer")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(DESC, "Burst Trans On/Off")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_BURST_TRANS")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(VAL,  "1")
   info(asyn:READBACK, "1")
}

record(bi, "$(P)$(R)BurstTransfer_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Burst Trans On/Off")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_BURST_TRANS")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

# Records for asynError testing
record(longout, "$(P)$(R)Test")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Test")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_TEST")
   field(VAL,  "4")
   info(asyn:READBACK, "1")
}

record(longin, "$(P)$(R)Test_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Test RBV")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_TEST")
   field(SCAN, "I/O Intr")
}
