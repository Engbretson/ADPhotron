#=================================================================#
# Template file: Photron.template
# Database for the records specific to the Photron detector driver
# Kevin Peterson
# October 27, 2015

include "ADBase.template"

###############################################################################
#  Note: The following are records defined in ADBase.template.                #
#        We are changing some of the fields here to reflect valid values for  #
#        Photron                                                              #
###############################################################################

# Acquire time needs a higher precision
record(ao, "$(P)$(R)AcquireTime")
{
   field(PREC, "7")
}

record(ai, "$(P)$(R)AcquireTime_RBV")
{
   field(PREC, "7")
}

# Only 2 data types are supported, unsigned 8 and 16 bit integers
record(mbbo, "$(P)$(R)DataType")
{
   field(ZRST, "UInt8")
   field(ZRVL, "1")
   field(ONST, "UInt16")
   field(ONVL, "3")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

record(mbbi, "$(P)$(R)DataType_RBV")
{
   field(ZRST, "UInt8")
   field(ZRVL, "1")
   field(ONST, "UInt16")
   field(ONVL, "3")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

# Only Mono, Bayer and RGB1 color modes are supported at this time
record(mbbo, "$(P)$(R)ColorMode")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "")
   field(ONVL, "")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

record(mbbi, "$(P)$(R)ColorMode_RBV")
{
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "")
   field(ONVL, "")
   field(TWST, "")
   field(TWVL, "")
   field(THST, "")
   field(THVL, "")
   field(FRST, "")
   field(FRVL, "")
   field(FVST, "")
   field(FVVL, "")
   field(SXST, "")
   field(SXVL, "")
   field(SVST, "")
   field(SVVL, "")
}

###############################################################################
#  Note: The following records are specific to the Photron                    #
###############################################################################

# This could probably be replaced with a bo, since there are only two values
# that don't return errors.
record(mbbo, "$(P)$(R)AcquireMode")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_ACQUIRE_MODE")
   field(ZRST, "Live")
   field(ZRVL, "0")
   field(ONST, "Record")
   field(ONVL, "1")
   field(VAL,  "0")
}

record(longin, "$(P)$(R)Status_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_STATUS")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MaxFrames_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MAX_FRAMES")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)8BitSel")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "8 Bit Select")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_8_BIT_SEL")
   field(ZRST, "None")
   field(ZRVL, "0")
   field(ONST, "One")
   field(ONVL, "1")
   field(TWST, "Two")
   field(TWVL, "2")
   field(THST, "Three")
   field(THVL, "3")
   field(FRST, "Four")
   field(FRVL, "4")
}

record(mbbi, "$(P)$(R)8BitSel_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "8 Bit Select")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_8_BIT_SEL")
   field(ZRST, "None")
   field(ZRVL, "0")
   field(ONST, "One")
   field(ONVL, "1")
   field(TWST, "Two")
   field(TWVL, "2")
   field(THST, "Three")
   field(THVL, "3")
   field(FRST, "Four")
   field(FRVL, "4")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)RecordRate")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Record Rate (FPS)")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_REC_RATE")
}

record(longin, "$(P)$(R)RecordRate_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Record Rate (FPS)")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_REC_RATE")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)AfterFrames")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Trigger after frames")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_AFTER_FRAMES")
}

record(longin, "$(P)$(R)AfterFrames_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Trigger after frames")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_AFTER_FRAMES")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)RandomFrames")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Trigger random frames")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_RANDOM_FRAMES")
}

record(longin, "$(P)$(R)RandomFrames_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Trigger random frames")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_RANDOM_FRAMES")
   field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)RecCount")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Num recorded")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_REC_COUNT")
}

record(longin, "$(P)$(R)RecCount_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Num recorded")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_REC_COUNT")
   field(SCAN, "I/O Intr")
}

record(mbbi, "$(P)$(R)TwoStageMode_RBV")
{
   field(ZRST, "Full")
   field(ZRVL, "0")
   field(ONST, "Half")
   field(ONVL, "1")
   field(TWST, "Quarter")
   field(TWVL, "2")
   field(THST, "One-eighth")
   field(THVL, "3")
}

## Software trigger
record(bo, "$(P)$(R)SoftwareTrigger") {
  field(PINI, "NO")
  field(DTYP, "asynInt32")
  field(ZNAM, "Done")
  field(ONAM, "Trigger")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SOFT_TRIG")
}

record(bo, "$(P)$(R)RecReady") {
  field(PINI, "NO")
  field(DTYP, "asynInt32")
  field(ZNAM, "Done")
  field(ONAM, "Apply")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_REC_READY")
}

record(bo, "$(P)$(R)Endless") {
  field(PINI, "NO")
  field(DTYP, "asynInt32")
  field(ZNAM, "Done")
  field(ONAM, "Apply")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_ENDLESS")
}

record(bo, "$(P)$(R)Live") {
  field(PINI, "NO")
  field(DTYP, "asynInt32")
  field(ZNAM, "Done")
  field(ONAM, "Apply")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_LIVE")
}

record(bo, "$(P)$(R)Playback") {
  field(PINI, "NO")
  field(DTYP, "asynInt32")
  field(ZNAM, "Done")
  field(ONAM, "Apply")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_PLAYBACK")
}

record(bo, "$(P)$(R)ReadMem") {
  field(PINI, "NO")
  field(DTYP, "asynInt32")
  field(ZNAM, "Done")
  field(ONAM, "Apply")
  field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_READ_MEM")
}

record(longin, "$(P)$(R)MemIRIGDay_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Day")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_DAY")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MemIRIGHour_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Hour")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_HOUR")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MemIRIGMin_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Minute")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_MIN")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MemIRIGSec_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Second")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_SEC")
   field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)MemIRIGUsec_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Microsecond")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_USEC")
   field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(R)MemIRIGSigEx_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Mem IRIG Signal Exist")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_MEM_IRIG_SIGEX")
   field(ZNAM, "Internal")
   field(ONAM, "External")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)IRIG")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(DESC, "IRIG On/Off")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_IRIG")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(VAL,  "1")
}

record(bi, "$(P)$(R)IRIG_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "IRIG On/Off")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_IRIG")
   field(ZNAM, "Off")
   field(ONAM, "On")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)SyncPriority")
{
   field(DTYP, "asynInt32")
   field(PINI, "YES")
   field(DESC, "Sync Priority")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SYNC_PRIORITY")
   field(ZRST, "Off")
   field(ZRVL, "0")
   field(ONST, "Master")
   field(ONVL, "1")
   field(TWST, "Slave")
   field(TWVL, "2")
}

record(mbbi, "$(P)$(R)SyncPriority_RBV")
{
   field(DTYP, "asynInt32")
   field(DESC, "Sync Priority")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PHOTRON_SYNC_PRIORITY")
   field(ZRST, "Off")
   field(ZRVL, "0")
   field(ONST, "Master")
   field(ONVL, "1")
   field(TWST, "Slave")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}